generator client { 
provider = "prisma-client-js"
}
datasource db { 
provider = "sqlserver" 
url = env("DATABASE_URL")
}
model User {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(50)
  surname        String   @db.VarChar(50)
  phoneNumber    String   @db.NChar(11)
  email          String  @unique @db.VarChar(50)
  password       String?  @db.VarChar(MAX)
  isAdmin        Boolean  @default(false)
  isGuest        Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.DateTime2
  updatedAt      DateTime @updatedAt @db.DateTime2
  appointments   Appointment[]
  appointmentMessages AppointmentMessage[]
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("Users")
}

model Appointment { 
  id Int @id(map: "PK_Appointments") @default(autoincrement()) 
  userId Int 
  description String @db.VarChar(500) 
  date DateTime @db.Date 
  time DateTime @db.Time 
  createdAt DateTime @default(now()) @db.DateTime2 
  status Int @default(0) // ‚Üê Yeni alan burada
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK_Appointments_Users") 
  messages AppointmentMessage[] 
  token String? @unique @default(uuid()) @db.VarChar(100)


  @@map("Appointments")
}

model AppointmentMessage { 
id Int @id(map: "PK_AppointmentMessages") @default(autoincrement()) 
appointmentId Int 
senderId Int 
text String @db.VarChar(500) 
createdAt DateTime @default(now()) @db.DateTime2 
appointment Appointment @relation(fields: [appointmentId], references: [id], onUpdate: NoAction, map: "FK_AppointmentMessages_Appointments") 
sender User @relation(fields: [senderId], references: [id], onUpdate: NoAction, map: "FK_AppointmentMessages_Users") 
@@map("AppointmentMessages")
}
model Message {
  id          Int    @id(map: "PK_Messages") @default(autoincrement())
  sender_id   Int
  receiver_id Int
  title       String @db.VarChar(50)
  description String @db.VarChar(500)
  createdAt DateTime @default(now()) @db.DateTime2 
  sender      User   @relation("SentMessages", fields: [sender_id], references: [id], onUpdate: NoAction, map: "FK_Messages_Users")
  receiver    User   @relation("ReceivedMessages", fields: [receiver_id], references: [id], onUpdate: NoAction, map: "FK_Messages_Users1")

  @@map("Messages")
}
model Transaction {
  id          Int      @id(map: "PK_Transactions") @default(autoincrement())
  type        String   @db.VarChar(10) // "income" or "expense" 
  amount      Decimal  @db.Decimal(18, 2)
  date        DateTime @db.Date
  description String   @db.VarChar(500)  
  createdAt   DateTime @default(now()) @db.DateTime2

  @@map("Transactions")
}